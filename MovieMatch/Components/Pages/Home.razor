@page "/"
@rendermode InteractiveServer

@using System.Text.Json
@using System.Text.Json.Serialization
@using BlazorBootstrap

@inject HttpClient Client

<PageTitle>MovieMatch</PageTitle>

<div class="form-group row mb-3">
    <label class="col-md-2 col-form-label">Match by IMDb ID</label>
    <div class="col-md-10">
        <Switch Class="mt-2" @bind-Value="getMovieByName" @onclick="ClearData" Label="Match by name" />
    </div>
</div>

<EditForm Model="movie" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (@getMovieByName)
    {
        <div>
            <InputText @bind-Value="movieName" placeholder="Input Movie Name" />
            <InputText @bind-Value="movieYear" placeholder="Input Movie Year" />
            <input type="submit" value="Submit" class="btn btn-primary" />
        </div>
    }
    else
    {
        <div>
            <InputText @bind-Value="movieId" placeholder="Input Movie IMDb ID" />
            <input type="submit" value="Submit" class="btn btn-primary" />
        </div>
    }
</EditForm>

@if (getMovieError || movie is null)
{
    <p>Unable to retrieve movie: @reasonPhrase</p>
}
else if (movie.Title != string.Empty && movie.Title is not null)
{
    <Card Color="CardColor.Dark" Style="width:50rem;">
        <CardBody>
            <CardTitle>@movie.Title</CardTitle>
            <CardSubTitle Class="mb-2 text-muted">@movie.Released, Rated @movie.Rated, @movie.Runtime</CardSubTitle>
            <CardText>@movie.Plot</CardText>
			<CardText><b>Genre: </b>@movie.Genre</CardText>
            <CardText><b>Director: </b>@movie.Director</CardText>
            <CardText><b>Writer: </b>@movie.Writer</CardText>
            <CardText><b>Actors: </b>@movie.Actors</CardText>
            <CardText><b>Language: </b>@movie.Language</CardText>
            <CardText><b>Country: </b>@movie.Country</CardText>
            <CardText><b>Awards: </b>@movie.Awards</CardText>
        </CardBody>
    </Card>
}

@code {
    private bool getMovieByName = true;
    private Movie movie = new();
    private bool getMovieError;
    private string reasonPhrase = string.Empty;
    private string movieName = string.Empty;
    private string movieYear = string.Empty;
    private string movieId = string.Empty;
    Collapse collapse1 = default!;


    private async void Submit()
    {
        string url = "";
        try
        {
            MovieQuery query = new(movieName, movieId, movieYear, getMovieByName);
            url = query.GenerateQuery();
        }
        catch
        {
            reasonPhrase = "Please input movie name or ID";
            getMovieError = true;
        }

        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, url);

        var response = await Client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            movie = await JsonSerializer.DeserializeAsync<Movie>(responseStream);
        }
        else
        {
            reasonPhrase = response.ReasonPhrase;
            getMovieError = true;
        }
    }

    private async Task ShowContentAsync() => await collapse1.ShowAsync();

    private void ClearData()
    {
        movieName = string.Empty;
        movieYear = string.Empty;
        movieId = string.Empty;
        movie = new();
    }
}